const prisma = require("../config/prisma");

// ‚úÖ 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
exports.getBuses = async (req, res) => {
  try {
    const buses = await prisma.bus.findMany({
      include: { 
        driver: { 
          select: { id: true, name: true, email: true } 
        } 
      },
    });
    res.status(200).json(buses);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Server Error" });
  }
};


// ‚úÖ 2. ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏±‡∏ô
exports.getBusById = async (req, res) => {
  try {
    const { id } = req.params;
    const bus = await prisma.bus.findUnique({
      where: { id: Number(id) },
      include: { driver: { select: { id: true, name: true, email: true } } },
    });

    if (!bus) return res.status(404).json({ message: "Bus not found" });

    res.status(200).json(bus);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Server Error" });
  }
};

// ‚úÖ 3. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏ñ‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Admin)
exports.addBus = async (req, res) => {
  try {
    const { name } = req.body;
    
    const newBus = await prisma.bus.create({
      data: { name, status: "available" },
    });

    res.status(201).json({ message: "Bus added successfully", newBus });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Server Error" });
  }
};

// ‚úÖ 4. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏ñ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Driver)
exports.updateBusStatus = async (req, res) => {
  try {
      console.log("üîπ User:", req.user);
      console.log("üîπ Params:", req.params);
      console.log("üîπ Body:", req.body);

      const { id } = req.params; // ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å URL
      const { status } = req.body; // ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Body

      if (!req.user || req.user.role !== "driver") {
          return res.status(403).json({ message: "Access Denied: Only drivers can update bus status" });
      }

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Driver ID ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Bus ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const bus = await prisma.bus.findUnique({
          where: { id: Number(id) },
      });

      if (!bus || bus.driverId !== req.user.id) {
          return res.status(403).json({ message: "Access Denied: This is not your bus" });
      }

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ‡∏ö‡∏±‡∏™
      const updatedBus = await prisma.bus.update({
          where: { id: Number(id) },
          data: { status },
      });

      res.status(200).json({ message: "Bus status updated", updatedBus });
  } catch (err) {
      console.error("üö® Error updating bus status:", err);
      res.status(500).json({ message: "Server Error" });
  }
};


// ‚úÖ 5. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏£‡∏ñ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Admin)
exports.assignDriver = async (req, res) => {
  try {
    const { id } = req.params;  
    let { driverId } = req.body;  

    if (driverId === null || driverId === "null" || driverId === "") {
      const updatedBus = await prisma.bus.update({
        where: { id: Number(id) },
        data: { driverId: null },
        include: { driver: { select: { id: true, name: true, email: true } } }
      });

      return res.status(200).json({
        message: "‡∏•‡∏ö‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
        updatedBus,
      });
    }

    // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á driverId ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Number
    driverId = Number(driverId);
    if (isNaN(driverId) || driverId <= 0) {
      return res.status(400).json({ message: "Invalid driver ID" });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    const driver = await prisma.user.findUnique({
      where: { id: driverId },
      select: { id: true, name: true, email: true, role: true }
    });

    if (!driver || driver.role !== "driver") {
      return res.status(400).json({ message: "Driver not found or invalid role" });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏™‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    const bus = await prisma.bus.findUnique({
      where: { id: Number(id) },
    });

    if (!bus) {
      return res.status(404).json({ message: "Bus not found" });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏£‡∏ñ‡∏Ñ‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    const existingBusWithDriver = await prisma.bus.findFirst({
      where: { driverId: driverId }
    });

    if (existingBusWithDriver) {
      return res.status(400).json({ message: "This driver is already assigned to another bus" });
    }

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏ñ‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
    const updatedBus = await prisma.bus.update({
      where: { id: Number(id) },
      data: { driverId },
      include: { driver: { select: { id: true, name: true, email: true } } }
    });

    res.status(200).json({
      message: "Driver assigned to bus",
      updatedBus
    });

  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Server Error" });
  }
};


  // ‚úÖ 6. ‡∏•‡∏ö‡∏£‡∏ñ‡∏ö‡∏±‡∏™ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Admin)
exports.deleteBus = async (req, res) => {
  try {
    const { id } = req.params;

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏ñ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const bus = await prisma.bus.findUnique({ where: { id: Number(id) } });
    if (!bus) {
      return res.status(404).json({ message: "Bus not found" });
    }

    // ‚úÖ ‡∏•‡∏ö‡∏£‡∏ñ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await prisma.bus.delete({ where: { id: Number(id) } });

    res.status(200).json({ message: "Bus deleted successfully" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Server Error" });
  }
};

  
  exports.updateBusLocation = async (req, res) => {
    try {
      const { id } = req.params;
      const { latitude, longitude } = req.body;
      
      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ‡πÉ‡∏ô Database
      const updatedBus = await prisma.bus.update({
        where: { id: Number(id) },
        data: { latitude, longitude },
      });
  
      // ‚úÖ ‡∏™‡πà‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Passenger ‡∏ú‡πà‡∏≤‡∏ô WebSocket
      const io = req.app.get("io");
      io.emit("bus-location-update", { id, latitude, longitude });
  
      res.status(200).json({ message: "Bus location updated", updatedBus });
    } catch (err) {
      console.error(err);
      res.status(500).json({ message: "Server Error" });
    }
  };
  