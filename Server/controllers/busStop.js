  const prisma = require("../config/prisma");

  // ‚úÖ 1. ‡∏î‡∏∂‡∏á‡∏õ‡πâ‡∏≤‡∏¢‡∏£‡∏ñ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  exports.getBusStops = async (req, res) => {
    try {
      const busStops = await prisma.busStop.findMany();
      res.status(200).json(busStops);
    } catch (err) {
      console.error(err);
      res.status(500).json({ message: "Server Error" });
    }
  };

  // ‚úÖ 2. ‡∏î‡∏π‡∏õ‡πâ‡∏≤‡∏¢‡∏£‡∏ñ‡∏ï‡∏≤‡∏° ID
  exports.getBusStopById = async (req, res) => {
    try {
      let { id } = req.params;
      console.log("üõ†Ô∏è Received ID from request:", id);

      if (!id || isNaN(id)) {
        return res.status(400).json({ error: "Invalid Bus Stop ID" });
      }

      id = parseInt(id); // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á id ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
      const busStop = await prisma.busStop.findUnique({
        where: { id }
      });

      if (!busStop) {
        return res.status(404).json({ error: "Bus Stop not found" });
      }

      res.json(busStop);
    } catch (err) {
      console.error("üö® Error fetching bus stop:", err);
      res.status(500).json({ error: "Internal Server Error" });
    }
  };


  // ‚úÖ 3. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡πâ‡∏≤‡∏¢‡∏£‡∏ñ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Admin)
  exports.addBusStop = async (req, res) => {
    try {
      const { name, latitude, longitude } = req.body;

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
      if (!name || !latitude || !longitude) {
        return res.status(400).json({ message: "All fields are required" });
      }
      if (isNaN(latitude) || isNaN(longitude)) {
        return res.status(400).json({ message: "Latitude and Longitude must be numbers" });
      }
      if (latitude < -90 || latitude > 90 || longitude < -180 || longitude > 180) {
        return res.status(400).json({ message: "Invalid latitude or longitude range" });
      }

      const newBusStop = await prisma.busStop.create({
        data: { name, latitude: parseFloat(latitude), longitude: parseFloat(longitude) }
      });

      res.status(201).json({ message: "Bus stop added successfully", newBusStop });
    } catch (err) {
      console.error(err);
      res.status(500).json({ message: "Server Error" });
    }
  };

  // ‚úÖ 4. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡πâ‡∏≤‡∏¢‡∏£‡∏ñ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Admin)
  exports.updateBusStop = async (req, res) => {
    try {
      const { id } = req.params;
      const { name, latitude, longitude } = req.body;

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏õ‡πâ‡∏≤‡∏¢‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
      const existingBusStop = await prisma.busStop.findUnique({
        where: { id: Number(id) }
      });

      if (!existingBusStop) {
        return res.status(404).json({ message: "Bus stop not found" });
      }

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
      if (!name || !latitude || !longitude) {
        return res.status(400).json({ message: "All fields are required" });
      }
      if (isNaN(latitude) || isNaN(longitude)) {
        return res.status(400).json({ message: "Latitude and Longitude must be numbers" });
      }
      if (latitude < -90 || latitude > 90 || longitude < -180 || longitude > 180) {
        return res.status(400).json({ message: "Invalid latitude or longitude range" });
      }

      const updatedBusStop = await prisma.busStop.update({
        where: { id: Number(id) },
        data: { name, latitude: parseFloat(latitude), longitude: parseFloat(longitude) }
      });

      res.status(200).json({ message: "Bus stop updated", updatedBusStop });
    } catch (err) {
      console.error(err);
      res.status(500).json({ message: "Server Error" });
    }
  };

  // ‚úÖ 5. ‡∏•‡∏ö‡∏õ‡πâ‡∏≤‡∏¢‡∏£‡∏ñ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Admin)
  exports.deleteBusStop = async (req, res) => {
    try {
      const { id } = req.params;

      // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏õ‡πâ‡∏≤‡∏¢‡∏£‡∏ñ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏´‡∏°
      const existingBusStop = await prisma.busStop.findUnique({
        where: { id: Number(id) }
      });

      if (!existingBusStop) {
        return res.status(404).json({ message: "Bus stop not found" });
      }

      // ‚úÖ ‡∏•‡∏ö `CheckIn` ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏õ‡πâ‡∏≤‡∏¢‡∏£‡∏ñ‡∏ô‡∏µ‡πâ‡∏Å‡πà‡∏≠‡∏ô
      await prisma.checkIn.deleteMany({
        where: { busStopId: Number(id) }
      });

      // ‚úÖ ‡∏•‡∏ö‡∏õ‡πâ‡∏≤‡∏¢‡∏£‡∏ñ
      await prisma.busStop.delete({
        where: { id: Number(id) }
      });

      res.status(200).json({ message: "Bus stop and related check-ins deleted" });
    } catch (err) {
      console.error(err);
      res.status(500).json({ message: "Server Error" });
    }
  };
