import React, { useState, useEffect } from "react";
import { getBuses, addBus, assignDriver, deleteBus } from "../../api/bus";
import { getDrivers } from "../../api/user";
import useMaingobal from "../../../store/maingobal";
import { toast } from "react-toastify";
import { Link } from "react-router-dom";
import { PencilLine, Trash2 } from "lucide-react";
import Swal from "sweetalert2";

const FormBusManage = () => {
  const token = useMaingobal((state) => state.token);
  const [buses, setBuses] = useState([]);
  const [drivers, setDrivers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [form, setForm] = useState({ name: "" });

  // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞ busId
  const [selectedDrivers, setSelectedDrivers] = useState({});

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    setLoading(true);
    try {
      const [busRes, driverRes] = await Promise.all([
        getBuses(token),
        getDrivers(token),
      ]);
      setBuses(busRes.data);
      setDrivers(driverRes.data);

      // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ dropdown ‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏° driver ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏ñ
      const driverMapping = {};
      busRes.data.forEach((bus) => {
        driverMapping[bus.id] = bus.driver ? bus.driver.id.toString() : "";
      });
      setSelectedDrivers(driverMapping);
    } catch (err) {
      console.error("Error fetching data:", err);
      toast.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
    } finally {
      setLoading(false);
    }
  };

  const handleAddBus = async (e) => {
    e.preventDefault();
    try {
      const res = await addBus(token, { name: form.name });
      toast.success(`‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏ñ‡∏ö‡∏±‡∏™ "${res.data.newBus.name}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`);
      setForm({ name: "" });
      fetchData(); // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏ñ‡∏ö‡∏±‡∏™
    } catch (err) {
      console.error("Error adding bus:", err);
      toast.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏ñ‡∏ö‡∏±‡∏™‡πÑ‡∏î‡πâ");
    }
  };

  const handleDeleteBus = async (id) => {
    Swal.fire({
      title: "‚ö†Ô∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö?",
      text: "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏ñ‡∏ö‡∏±‡∏™‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#d33",
      cancelButtonColor: "#3085d6",
      confirmButtonText: "üóëÔ∏è ‡∏•‡∏ö‡πÄ‡∏•‡∏¢!",
      cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
    }).then(async (result) => {
      if (result.isConfirmed) {
        try {
          await deleteBus(token, id);
          toast.success("‡∏•‡∏ö‡∏£‡∏ñ‡∏ö‡∏±‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!");
          fetchData();
        } catch (err) {
          console.error("Error deleting bus:", err);
          toast.error("‡∏•‡∏ö‡∏£‡∏ñ‡∏ö‡∏±‡∏™‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        }
      }
    });
  };

  const handleAssignDriver = async (busId, driverId) => {
    try {
      if (!driverId) {
        toast.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö");
        return;
      }

      if (driverId === "null") {
        const res = await assignDriver(token, busId, null); // ‡∏™‡πà‡∏á null ‡πÑ‡∏õ backend
        toast.success("‡πÄ‡∏≠‡∏≤‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏ñ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        fetchData();
        return;
      }

      const numericDriverId = Number(driverId);
      if (isNaN(numericDriverId)) {
        toast.error("‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
        return;
      }

      // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á dropdown
      setSelectedDrivers((prev) => ({
        ...prev,
        [busId]: driverId,
      }));

      const response = await assignDriver(token, busId, numericDriverId);

      if (response.status === 400) {
        throw new Error(response.data.message);
      }

      toast.success("‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      fetchData();
    } catch (err) {
      console.error("Error assigning driver:", err);
      toast.error("‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

      // ‚úÖ ‡∏ñ‡πâ‡∏≤ error ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ dropdown ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
      setSelectedDrivers((prev) => ({
        ...prev,
        [busId]: buses.find((bus) => bus.id === busId)?.driver?.id.toString() || "",
      }));
    }
  };

  if (loading) {
    return <p className="text-center">‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>;
  }

  return (
    <div className="container mx-auto p-4 bg-white shadow-md">
      <h1 className="text-lg font-semibold">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏ñ‡∏ö‡∏±‡∏™</h1>

      {/* ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏ñ‡∏ö‡∏±‡∏™ */}
      <form onSubmit={handleAddBus} className="mb-4">
        <input
          className="border w-full p-2 my-2"
          value={form.name}
          onChange={(e) => setForm({ name: e.target.value })}
          placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏ñ‡∏ö‡∏±‡∏™"
          required
        />
        <button className="bg-green-500 text-white px-4 py-2 rounded-md shadow-md hover:bg-green-600">
          ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏ñ‡∏ö‡∏±‡∏™
        </button>

      </form>

      <hr />
      <br />

      <table className="table border-separate border-spacing-2 w-full">
        <thead>
          <tr className="bg-gray-200">
            <th className="px-4 py-2">No.</th>
            <th className="px-4 py-2">‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏ñ‡∏ö‡∏±‡∏™</th>
            <th className="px-4 py-2">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
            <th className="px-4 py-2">‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö</th>
            <th className="px-4 py-2">‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö</th>
            <th className="px-4 py-2">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
          </tr>
        </thead>
        <tbody>
          {buses.map((bus, index) => (
            <tr key={bus.id} className="hover:bg-gray-100">
              <td className="px-4 py-2 text-center">{index + 1}</td>
              <td className="px-4 py-2">{bus.name}</td>
              <td className="px-4 py-2 text-center">{bus.status}</td>

              {/* ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö */}
              <td className="px-4 py-2 text-center">
                {bus.driver && bus.driver.name
                  ? `${bus.driver.name} (${bus.driver.email})`
                  : "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö"}
              </td>

              <td className="px-4 py-2">
                <select
                  className="border p-1"
                  value={selectedDrivers[bus.id] || ""}
                  onChange={(e) => handleAssignDriver(bus.id, e.target.value)}
                >
                  <option value="" disabled>
                    ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
                  </option>
                  <option value="null">
                    ‚ùå‡πÄ‡∏≠‡∏≤‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏≠‡∏≠‡∏Å
                    </option> 
                  {drivers.map((driver) => (
                    <option key={driver.id} value={driver.id}>
                      {driver.name} ({driver.email})
                    </option>
                  ))}
                </select>
              </td>

              <td className="px-4 py-2 flex justify-around">
                <p
                  className="bg-red-400 text-white px-3 py-1 rounded-md hover:scale-105 hover:-translate-y-1 hover:duration-200 shadow-md"
                  onClick={() => handleDeleteBus(bus.id)}
                >
                  <Trash2 />
                </p>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default FormBusManage;
